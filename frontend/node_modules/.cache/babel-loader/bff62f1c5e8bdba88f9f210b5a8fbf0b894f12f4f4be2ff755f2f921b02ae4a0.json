{"ast":null,"code":"/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst debug = require('debug')('simple-peer');\nconst getBrowserRTC = require('get-browser-rtc');\nconst randombytes = require('randombytes');\nconst stream = require('readable-stream');\nconst queueMicrotask = require('queue-microtask'); // TODO: remove when Node 10 is not supported\nconst errCode = require('err-code');\nconst {\n  Buffer\n} = require('buffer');\nconst MAX_BUFFERED_AMOUNT = 64 * 1024;\nconst ICECOMPLETE_TIMEOUT = 5 * 1000;\nconst CHANNEL_CLOSING_TIMEOUT = 5 * 1000;\n\n// HACK: Filter trickle lines when trickle is disabled #354\nfunction filterTrickle(sdp) {\n  return sdp.replace(/a=ice-options:trickle\\s\\n/g, '');\n}\nfunction warn(message) {\n  console.warn(message);\n}\n\n/**\n * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.\n * Duplex stream.\n * @param {Object} opts\n */\nclass Peer extends stream.Duplex {\n  constructor(opts) {\n    opts = Object.assign({\n      allowHalfOpen: false\n    }, opts);\n    super(opts);\n    this._id = randombytes(4).toString('hex').slice(0, 7);\n    this._debug('new peer %o', opts);\n    this.channelName = opts.initiator ? opts.channelName || randombytes(20).toString('hex') : null;\n    this.initiator = opts.initiator || false;\n    this.channelConfig = opts.channelConfig || Peer.channelConfig;\n    this.channelNegotiated = this.channelConfig.negotiated;\n    this.config = Object.assign({}, Peer.config, opts.config);\n    this.offerOptions = opts.offerOptions || {};\n    this.answerOptions = opts.answerOptions || {};\n    this.sdpTransform = opts.sdpTransform || (sdp => sdp);\n    this.streams = opts.streams || (opts.stream ? [opts.stream] : []); // support old \"stream\" option\n    this.trickle = opts.trickle !== undefined ? opts.trickle : true;\n    this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;\n    this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;\n    this.destroyed = false;\n    this.destroying = false;\n    this._connected = false;\n    this.remoteAddress = undefined;\n    this.remoteFamily = undefined;\n    this.remotePort = undefined;\n    this.localAddress = undefined;\n    this.localFamily = undefined;\n    this.localPort = undefined;\n    this._wrtc = opts.wrtc && typeof opts.wrtc === 'object' ? opts.wrtc : getBrowserRTC();\n    if (!this._wrtc) {\n      if (typeof window === 'undefined') {\n        throw errCode(new Error('No WebRTC support: Specify `opts.wrtc` option in this environment'), 'ERR_WEBRTC_SUPPORT');\n      } else {\n        throw errCode(new Error('No WebRTC support: Not a supported browser'), 'ERR_WEBRTC_SUPPORT');\n      }\n    }\n    this._pcReady = false;\n    this._channelReady = false;\n    this._iceComplete = false; // ice candidate trickle done (got null candidate)\n    this._iceCompleteTimer = null; // send an offer/answer anyway after some timeout\n    this._channel = null;\n    this._pendingCandidates = [];\n    this._isNegotiating = false; // is this peer waiting for negotiation to complete?\n    this._firstNegotiation = true;\n    this._batchedNegotiation = false; // batch synchronous negotiations\n    this._queuedNegotiation = false; // is there a queued negotiation request?\n    this._sendersAwaitingStable = [];\n    this._senderMap = new Map();\n    this._closingInterval = null;\n    this._remoteTracks = [];\n    this._remoteStreams = [];\n    this._chunk = null;\n    this._cb = null;\n    this._interval = null;\n    try {\n      this._pc = new this._wrtc.RTCPeerConnection(this.config);\n    } catch (err) {\n      queueMicrotask(() => this.destroy(errCode(err, 'ERR_PC_CONSTRUCTOR')));\n      return;\n    }\n\n    // We prefer feature detection whenever possible, but sometimes that's not\n    // possible for certain implementations.\n    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === 'number';\n    this._pc.oniceconnectionstatechange = () => {\n      this._onIceStateChange();\n    };\n    this._pc.onicegatheringstatechange = () => {\n      this._onIceStateChange();\n    };\n    this._pc.onconnectionstatechange = () => {\n      this._onConnectionStateChange();\n    };\n    this._pc.onsignalingstatechange = () => {\n      this._onSignalingStateChange();\n    };\n    this._pc.onicecandidate = event => {\n      this._onIceCandidate(event);\n    };\n\n    // Other spec events, unused by this implementation:\n    // - onconnectionstatechange\n    // - onicecandidateerror\n    // - onfingerprintfailure\n    // - onnegotiationneeded\n\n    if (this.initiator || this.channelNegotiated) {\n      this._setupData({\n        channel: this._pc.createDataChannel(this.channelName, this.channelConfig)\n      });\n    } else {\n      this._pc.ondatachannel = event => {\n        this._setupData(event);\n      };\n    }\n    if (this.streams) {\n      this.streams.forEach(stream => {\n        this.addStream(stream);\n      });\n    }\n    this._pc.ontrack = event => {\n      this._onTrack(event);\n    };\n    this._debug('initial negotiation');\n    this._needsNegotiation();\n    this._onFinishBound = () => {\n      this._onFinish();\n    };\n    this.once('finish', this._onFinishBound);\n  }\n  get bufferSize() {\n    return this._channel && this._channel.bufferedAmount || 0;\n  }\n\n  // HACK: it's possible channel.readyState is \"closing\" before peer.destroy() fires\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n  get connected() {\n    return this._connected && this._channel.readyState === 'open';\n  }\n  address() {\n    return {\n      port: this.localPort,\n      family: this.localFamily,\n      address: this.localAddress\n    };\n  }\n  signal(data) {\n    if (this.destroyed) throw errCode(new Error('cannot signal after peer is destroyed'), 'ERR_SIGNALING');\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (err) {\n        data = {};\n      }\n    }\n    this._debug('signal()');\n    if (data.renegotiate && this.initiator) {\n      this._debug('got request to renegotiate');\n      this._needsNegotiation();\n    }\n    if (data.transceiverRequest && this.initiator) {\n      this._debug('got request for transceiver');\n      this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);\n    }\n    if (data.candidate) {\n      if (this._pc.remoteDescription && this._pc.remoteDescription.type) {\n        this._addIceCandidate(data.candidate);\n      } else {\n        this._pendingCandidates.push(data.candidate);\n      }\n    }\n    if (data.sdp) {\n      this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(data)).then(() => {\n        if (this.destroyed) return;\n        this._pendingCandidates.forEach(candidate => {\n          this._addIceCandidate(candidate);\n        });\n        this._pendingCandidates = [];\n        if (this._pc.remoteDescription.type === 'offer') this._createAnswer();\n      }).catch(err => {\n        this.destroy(errCode(err, 'ERR_SET_REMOTE_DESCRIPTION'));\n      });\n    }\n    if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {\n      this.destroy(errCode(new Error('signal() called with invalid signal data'), 'ERR_SIGNALING'));\n    }\n  }\n  _addIceCandidate(candidate) {\n    const iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);\n    this._pc.addIceCandidate(iceCandidateObj).catch(err => {\n      if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) {\n        warn('Ignoring unsupported ICE candidate.');\n      } else {\n        this.destroy(errCode(err, 'ERR_ADD_ICE_CANDIDATE'));\n      }\n    });\n  }\n\n  /**\n   * Send text/binary data to the remote peer.\n   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk\n   */\n  send(chunk) {\n    this._channel.send(chunk);\n  }\n\n  /**\n   * Add a Transceiver to the connection.\n   * @param {String} kind\n   * @param {Object} init\n   */\n  addTransceiver(kind, init) {\n    this._debug('addTransceiver()');\n    if (this.initiator) {\n      try {\n        this._pc.addTransceiver(kind, init);\n        this._needsNegotiation();\n      } catch (err) {\n        this.destroy(errCode(err, 'ERR_ADD_TRANSCEIVER'));\n      }\n    } else {\n      this.emit('signal', {\n        // request initiator to renegotiate\n        type: 'transceiverRequest',\n        transceiverRequest: {\n          kind,\n          init\n        }\n      });\n    }\n  }\n\n  /**\n   * Add a MediaStream to the connection.\n   * @param {MediaStream} stream\n   */\n  addStream(stream) {\n    this._debug('addStream()');\n    stream.getTracks().forEach(track => {\n      this.addTrack(track, stream);\n    });\n  }\n\n  /**\n   * Add a MediaStreamTrack to the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n  addTrack(track, stream) {\n    this._debug('addTrack()');\n    const submap = this._senderMap.get(track) || new Map(); // nested Maps map [track, stream] to sender\n    let sender = submap.get(stream);\n    if (!sender) {\n      sender = this._pc.addTrack(track, stream);\n      submap.set(stream, sender);\n      this._senderMap.set(track, submap);\n      this._needsNegotiation();\n    } else if (sender.removed) {\n      throw errCode(new Error('Track has been removed. You should enable/disable tracks that you want to re-add.'), 'ERR_SENDER_REMOVED');\n    } else {\n      throw errCode(new Error('Track has already been added to that stream.'), 'ERR_SENDER_ALREADY_ADDED');\n    }\n  }\n\n  /**\n   * Replace a MediaStreamTrack by another in the connection.\n   * @param {MediaStreamTrack} oldTrack\n   * @param {MediaStreamTrack} newTrack\n   * @param {MediaStream} stream\n   */\n  replaceTrack(oldTrack, newTrack, stream) {\n    this._debug('replaceTrack()');\n    const submap = this._senderMap.get(oldTrack);\n    const sender = submap ? submap.get(stream) : null;\n    if (!sender) {\n      throw errCode(new Error('Cannot replace track that was never added.'), 'ERR_TRACK_NOT_ADDED');\n    }\n    if (newTrack) this._senderMap.set(newTrack, submap);\n    if (sender.replaceTrack != null) {\n      sender.replaceTrack(newTrack);\n    } else {\n      this.destroy(errCode(new Error('replaceTrack is not supported in this browser'), 'ERR_UNSUPPORTED_REPLACETRACK'));\n    }\n  }\n\n  /**\n   * Remove a MediaStreamTrack from the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n  removeTrack(track, stream) {\n    this._debug('removeSender()');\n    const submap = this._senderMap.get(track);\n    const sender = submap ? submap.get(stream) : null;\n    if (!sender) {\n      throw errCode(new Error('Cannot remove track that was never added.'), 'ERR_TRACK_NOT_ADDED');\n    }\n    try {\n      sender.removed = true;\n      this._pc.removeTrack(sender);\n    } catch (err) {\n      if (err.name === 'NS_ERROR_UNEXPECTED') {\n        this._sendersAwaitingStable.push(sender); // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874\n      } else {\n        this.destroy(errCode(err, 'ERR_REMOVE_TRACK'));\n      }\n    }\n    this._needsNegotiation();\n  }\n\n  /**\n   * Remove a MediaStream from the connection.\n   * @param {MediaStream} stream\n   */\n  removeStream(stream) {\n    this._debug('removeSenders()');\n    stream.getTracks().forEach(track => {\n      this.removeTrack(track, stream);\n    });\n  }\n  _needsNegotiation() {\n    this._debug('_needsNegotiation');\n    if (this._batchedNegotiation) return; // batch synchronous renegotiations\n    this._batchedNegotiation = true;\n    queueMicrotask(() => {\n      this._batchedNegotiation = false;\n      if (this.initiator || !this._firstNegotiation) {\n        this._debug('starting batched negotiation');\n        this.negotiate();\n      } else {\n        this._debug('non-initiator initial negotiation request discarded');\n      }\n      this._firstNegotiation = false;\n    });\n  }\n  negotiate() {\n    if (this.initiator) {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true;\n        this._debug('already negotiating, queueing');\n      } else {\n        this._debug('start negotiation');\n        setTimeout(() => {\n          // HACK: Chrome crashes if we immediately call createOffer\n          this._createOffer();\n        }, 0);\n      }\n    } else {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true;\n        this._debug('already negotiating, queueing');\n      } else {\n        this._debug('requesting negotiation from initiator');\n        this.emit('signal', {\n          // request initiator to renegotiate\n          type: 'renegotiate',\n          renegotiate: true\n        });\n      }\n    }\n    this._isNegotiating = true;\n  }\n\n  // TODO: Delete this method once readable-stream is updated to contain a default\n  // implementation of destroy() that automatically calls _destroy()\n  // See: https://github.com/nodejs/readable-stream/issues/283\n  destroy(err) {\n    this._destroy(err, () => {});\n  }\n  _destroy(err, cb) {\n    if (this.destroyed || this.destroying) return;\n    this.destroying = true;\n    this._debug('destroying (error: %s)', err && (err.message || err));\n    queueMicrotask(() => {\n      // allow events concurrent with the call to _destroy() to fire (see #692)\n      this.destroyed = true;\n      this.destroying = false;\n      this._debug('destroy (error: %s)', err && (err.message || err));\n      this.readable = this.writable = false;\n      if (!this._readableState.ended) this.push(null);\n      if (!this._writableState.finished) this.end();\n      this._connected = false;\n      this._pcReady = false;\n      this._channelReady = false;\n      this._remoteTracks = null;\n      this._remoteStreams = null;\n      this._senderMap = null;\n      clearInterval(this._closingInterval);\n      this._closingInterval = null;\n      clearInterval(this._interval);\n      this._interval = null;\n      this._chunk = null;\n      this._cb = null;\n      if (this._onFinishBound) this.removeListener('finish', this._onFinishBound);\n      this._onFinishBound = null;\n      if (this._channel) {\n        try {\n          this._channel.close();\n        } catch (err) {}\n\n        // allow events concurrent with destruction to be handled\n        this._channel.onmessage = null;\n        this._channel.onopen = null;\n        this._channel.onclose = null;\n        this._channel.onerror = null;\n      }\n      if (this._pc) {\n        try {\n          this._pc.close();\n        } catch (err) {}\n\n        // allow events concurrent with destruction to be handled\n        this._pc.oniceconnectionstatechange = null;\n        this._pc.onicegatheringstatechange = null;\n        this._pc.onsignalingstatechange = null;\n        this._pc.onicecandidate = null;\n        this._pc.ontrack = null;\n        this._pc.ondatachannel = null;\n      }\n      this._pc = null;\n      this._channel = null;\n      if (err) this.emit('error', err);\n      this.emit('close');\n      cb();\n    });\n  }\n  _setupData(event) {\n    if (!event.channel) {\n      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n      // which is invalid behavior. Handle it gracefully.\n      // See: https://github.com/feross/simple-peer/issues/163\n      return this.destroy(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'));\n    }\n    this._channel = event.channel;\n    this._channel.binaryType = 'arraybuffer';\n    if (typeof this._channel.bufferedAmountLowThreshold === 'number') {\n      this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;\n    }\n    this.channelName = this._channel.label;\n    this._channel.onmessage = event => {\n      this._onChannelMessage(event);\n    };\n    this._channel.onbufferedamountlow = () => {\n      this._onChannelBufferedAmountLow();\n    };\n    this._channel.onopen = () => {\n      this._onChannelOpen();\n    };\n    this._channel.onclose = () => {\n      this._onChannelClose();\n    };\n    this._channel.onerror = err => {\n      this.destroy(errCode(err, 'ERR_DATA_CHANNEL'));\n    };\n\n    // HACK: Chrome will sometimes get stuck in readyState \"closing\", let's check for this condition\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n    let isClosing = false;\n    this._closingInterval = setInterval(() => {\n      // No \"onclosing\" event\n      if (this._channel && this._channel.readyState === 'closing') {\n        if (isClosing) this._onChannelClose(); // closing timed out: equivalent to onclose firing\n        isClosing = true;\n      } else {\n        isClosing = false;\n      }\n    }, CHANNEL_CLOSING_TIMEOUT);\n  }\n  _read() {}\n  _write(chunk, encoding, cb) {\n    if (this.destroyed) return cb(errCode(new Error('cannot write after peer is destroyed'), 'ERR_DATA_CHANNEL'));\n    if (this._connected) {\n      try {\n        this.send(chunk);\n      } catch (err) {\n        return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'));\n      }\n      if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n        this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount);\n        this._cb = cb;\n      } else {\n        cb(null);\n      }\n    } else {\n      this._debug('write before connect');\n      this._chunk = chunk;\n      this._cb = cb;\n    }\n  }\n\n  // When stream finishes writing, close socket. Half open connections are not\n  // supported.\n  _onFinish() {\n    if (this.destroyed) return;\n\n    // Wait a bit before destroying so the socket flushes.\n    // TODO: is there a more reliable way to accomplish this?\n    const destroySoon = () => {\n      setTimeout(() => this.destroy(), 1000);\n    };\n    if (this._connected) {\n      destroySoon();\n    } else {\n      this.once('connect', destroySoon);\n    }\n  }\n  _startIceCompleteTimeout() {\n    if (this.destroyed) return;\n    if (this._iceCompleteTimer) return;\n    this._debug('started iceComplete timeout');\n    this._iceCompleteTimer = setTimeout(() => {\n      if (!this._iceComplete) {\n        this._iceComplete = true;\n        this._debug('iceComplete timeout completed');\n        this.emit('iceTimeout');\n        this.emit('_iceComplete');\n      }\n    }, this.iceCompleteTimeout);\n  }\n  _createOffer() {\n    if (this.destroyed) return;\n    this._pc.createOffer(this.offerOptions).then(offer => {\n      if (this.destroyed) return;\n      if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);\n      offer.sdp = this.sdpTransform(offer.sdp);\n      const sendOffer = () => {\n        if (this.destroyed) return;\n        const signal = this._pc.localDescription || offer;\n        this._debug('signal');\n        this.emit('signal', {\n          type: signal.type,\n          sdp: signal.sdp\n        });\n      };\n      const onSuccess = () => {\n        this._debug('createOffer success');\n        if (this.destroyed) return;\n        if (this.trickle || this._iceComplete) sendOffer();else this.once('_iceComplete', sendOffer); // wait for candidates\n      };\n      const onError = err => {\n        this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'));\n      };\n      this._pc.setLocalDescription(offer).then(onSuccess).catch(onError);\n    }).catch(err => {\n      this.destroy(errCode(err, 'ERR_CREATE_OFFER'));\n    });\n  }\n  _requestMissingTransceivers() {\n    if (this._pc.getTransceivers) {\n      this._pc.getTransceivers().forEach(transceiver => {\n        if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {\n          transceiver.requested = true; // HACK: Safari returns negotiated transceivers with a null mid\n          this.addTransceiver(transceiver.sender.track.kind);\n        }\n      });\n    }\n  }\n  _createAnswer() {\n    if (this.destroyed) return;\n    this._pc.createAnswer(this.answerOptions).then(answer => {\n      if (this.destroyed) return;\n      if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);\n      answer.sdp = this.sdpTransform(answer.sdp);\n      const sendAnswer = () => {\n        if (this.destroyed) return;\n        const signal = this._pc.localDescription || answer;\n        this._debug('signal');\n        this.emit('signal', {\n          type: signal.type,\n          sdp: signal.sdp\n        });\n        if (!this.initiator) this._requestMissingTransceivers();\n      };\n      const onSuccess = () => {\n        if (this.destroyed) return;\n        if (this.trickle || this._iceComplete) sendAnswer();else this.once('_iceComplete', sendAnswer);\n      };\n      const onError = err => {\n        this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'));\n      };\n      this._pc.setLocalDescription(answer).then(onSuccess).catch(onError);\n    }).catch(err => {\n      this.destroy(errCode(err, 'ERR_CREATE_ANSWER'));\n    });\n  }\n  _onConnectionStateChange() {\n    if (this.destroyed) return;\n    if (this._pc.connectionState === 'failed') {\n      this.destroy(errCode(new Error('Connection failed.'), 'ERR_CONNECTION_FAILURE'));\n    }\n  }\n  _onIceStateChange() {\n    if (this.destroyed) return;\n    const iceConnectionState = this._pc.iceConnectionState;\n    const iceGatheringState = this._pc.iceGatheringState;\n    this._debug('iceStateChange (connection: %s) (gathering: %s)', iceConnectionState, iceGatheringState);\n    this.emit('iceStateChange', iceConnectionState, iceGatheringState);\n    if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {\n      this._pcReady = true;\n      this._maybeReady();\n    }\n    if (iceConnectionState === 'failed') {\n      this.destroy(errCode(new Error('Ice connection failed.'), 'ERR_ICE_CONNECTION_FAILURE'));\n    }\n    if (iceConnectionState === 'closed') {\n      this.destroy(errCode(new Error('Ice connection closed.'), 'ERR_ICE_CONNECTION_CLOSED'));\n    }\n  }\n  getStats(cb) {\n    // statreports can come with a value array instead of properties\n    const flattenValues = report => {\n      if (Object.prototype.toString.call(report.values) === '[object Array]') {\n        report.values.forEach(value => {\n          Object.assign(report, value);\n        });\n      }\n      return report;\n    };\n\n    // Promise-based getStats() (standard)\n    if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {\n      this._pc.getStats().then(res => {\n        const reports = [];\n        res.forEach(report => {\n          reports.push(flattenValues(report));\n        });\n        cb(null, reports);\n      }, err => cb(err));\n\n      // Single-parameter callback-based getStats() (non-standard)\n    } else if (this._pc.getStats.length > 0) {\n      this._pc.getStats(res => {\n        // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed\n        if (this.destroyed) return;\n        const reports = [];\n        res.result().forEach(result => {\n          const report = {};\n          result.names().forEach(name => {\n            report[name] = result.stat(name);\n          });\n          report.id = result.id;\n          report.type = result.type;\n          report.timestamp = result.timestamp;\n          reports.push(flattenValues(report));\n        });\n        cb(null, reports);\n      }, err => cb(err));\n\n      // Unknown browser, skip getStats() since it's anyone's guess which style of\n      // getStats() they implement.\n    } else {\n      cb(null, []);\n    }\n  }\n  _maybeReady() {\n    this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady);\n    if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return;\n    this._connecting = true;\n\n    // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339\n    const findCandidatePair = () => {\n      if (this.destroyed) return;\n      this.getStats((err, items) => {\n        if (this.destroyed) return;\n\n        // Treat getStats error as non-fatal. It's not essential.\n        if (err) items = [];\n        const remoteCandidates = {};\n        const localCandidates = {};\n        const candidatePairs = {};\n        let foundSelectedCandidatePair = false;\n        items.forEach(item => {\n          // TODO: Once all browsers support the hyphenated stats report types, remove\n          // the non-hypenated ones\n          if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {\n            remoteCandidates[item.id] = item;\n          }\n          if (item.type === 'localcandidate' || item.type === 'local-candidate') {\n            localCandidates[item.id] = item;\n          }\n          if (item.type === 'candidatepair' || item.type === 'candidate-pair') {\n            candidatePairs[item.id] = item;\n          }\n        });\n        const setSelectedCandidatePair = selectedCandidatePair => {\n          foundSelectedCandidatePair = true;\n          let local = localCandidates[selectedCandidatePair.localCandidateId];\n          if (local && (local.ip || local.address)) {\n            // Spec\n            this.localAddress = local.ip || local.address;\n            this.localPort = Number(local.port);\n          } else if (local && local.ipAddress) {\n            // Firefox\n            this.localAddress = local.ipAddress;\n            this.localPort = Number(local.portNumber);\n          } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            local = selectedCandidatePair.googLocalAddress.split(':');\n            this.localAddress = local[0];\n            this.localPort = Number(local[1]);\n          }\n          if (this.localAddress) {\n            this.localFamily = this.localAddress.includes(':') ? 'IPv6' : 'IPv4';\n          }\n          let remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];\n          if (remote && (remote.ip || remote.address)) {\n            // Spec\n            this.remoteAddress = remote.ip || remote.address;\n            this.remotePort = Number(remote.port);\n          } else if (remote && remote.ipAddress) {\n            // Firefox\n            this.remoteAddress = remote.ipAddress;\n            this.remotePort = Number(remote.portNumber);\n          } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            remote = selectedCandidatePair.googRemoteAddress.split(':');\n            this.remoteAddress = remote[0];\n            this.remotePort = Number(remote[1]);\n          }\n          if (this.remoteAddress) {\n            this.remoteFamily = this.remoteAddress.includes(':') ? 'IPv6' : 'IPv4';\n          }\n          this._debug('connect local: %s:%s remote: %s:%s', this.localAddress, this.localPort, this.remoteAddress, this.remotePort);\n        };\n        items.forEach(item => {\n          // Spec-compliant\n          if (item.type === 'transport' && item.selectedCandidatePairId) {\n            setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);\n          }\n\n          // Old implementations\n          if (item.type === 'googCandidatePair' && item.googActiveConnection === 'true' || (item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected) {\n            setSelectedCandidatePair(item);\n          }\n        });\n\n        // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates\n        // But wait until at least 1 candidate pair is available\n        if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {\n          setTimeout(findCandidatePair, 100);\n          return;\n        } else {\n          this._connecting = false;\n          this._connected = true;\n        }\n        if (this._chunk) {\n          try {\n            this.send(this._chunk);\n          } catch (err) {\n            return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'));\n          }\n          this._chunk = null;\n          this._debug('sent chunk from \"write before connect\"');\n          const cb = this._cb;\n          this._cb = null;\n          cb(null);\n        }\n\n        // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,\n        // fallback to using setInterval to implement backpressure.\n        if (typeof this._channel.bufferedAmountLowThreshold !== 'number') {\n          this._interval = setInterval(() => this._onInterval(), 150);\n          if (this._interval.unref) this._interval.unref();\n        }\n        this._debug('connect');\n        this.emit('connect');\n      });\n    };\n    findCandidatePair();\n  }\n  _onInterval() {\n    if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n      return;\n    }\n    this._onChannelBufferedAmountLow();\n  }\n  _onSignalingStateChange() {\n    if (this.destroyed) return;\n    if (this._pc.signalingState === 'stable') {\n      this._isNegotiating = false;\n\n      // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'\n      this._debug('flushing sender queue', this._sendersAwaitingStable);\n      this._sendersAwaitingStable.forEach(sender => {\n        this._pc.removeTrack(sender);\n        this._queuedNegotiation = true;\n      });\n      this._sendersAwaitingStable = [];\n      if (this._queuedNegotiation) {\n        this._debug('flushing negotiation queue');\n        this._queuedNegotiation = false;\n        this._needsNegotiation(); // negotiate again\n      } else {\n        this._debug('negotiated');\n        this.emit('negotiated');\n      }\n    }\n    this._debug('signalingStateChange %s', this._pc.signalingState);\n    this.emit('signalingStateChange', this._pc.signalingState);\n  }\n  _onIceCandidate(event) {\n    if (this.destroyed) return;\n    if (event.candidate && this.trickle) {\n      this.emit('signal', {\n        type: 'candidate',\n        candidate: {\n          candidate: event.candidate.candidate,\n          sdpMLineIndex: event.candidate.sdpMLineIndex,\n          sdpMid: event.candidate.sdpMid\n        }\n      });\n    } else if (!event.candidate && !this._iceComplete) {\n      this._iceComplete = true;\n      this.emit('_iceComplete');\n    }\n    // as soon as we've received one valid candidate start timeout\n    if (event.candidate) {\n      this._startIceCompleteTimeout();\n    }\n  }\n  _onChannelMessage(event) {\n    if (this.destroyed) return;\n    let data = event.data;\n    if (data instanceof ArrayBuffer) data = Buffer.from(data);\n    this.push(data);\n  }\n  _onChannelBufferedAmountLow() {\n    if (this.destroyed || !this._cb) return;\n    this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount);\n    const cb = this._cb;\n    this._cb = null;\n    cb(null);\n  }\n  _onChannelOpen() {\n    if (this._connected || this.destroyed) return;\n    this._debug('on channel open');\n    this._channelReady = true;\n    this._maybeReady();\n  }\n  _onChannelClose() {\n    if (this.destroyed) return;\n    this._debug('on channel close');\n    this.destroy();\n  }\n  _onTrack(event) {\n    if (this.destroyed) return;\n    event.streams.forEach(eventStream => {\n      this._debug('on track');\n      this.emit('track', event.track, eventStream);\n      this._remoteTracks.push({\n        track: event.track,\n        stream: eventStream\n      });\n      if (this._remoteStreams.some(remoteStream => {\n        return remoteStream.id === eventStream.id;\n      })) return; // Only fire one 'stream' event, even though there may be multiple tracks per stream\n\n      this._remoteStreams.push(eventStream);\n      queueMicrotask(() => {\n        this._debug('on stream');\n        this.emit('stream', eventStream); // ensure all tracks have been added\n      });\n    });\n  }\n  _debug() {\n    const args = [].slice.call(arguments);\n    args[0] = '[' + this._id + '] ' + args[0];\n    debug.apply(null, args);\n  }\n}\nPeer.WEBRTC_SUPPORT = !!getBrowserRTC();\n\n/**\n * Expose peer and data channel config for overriding all Peer\n * instances. Otherwise, just set opts.config or opts.channelConfig\n * when constructing a Peer.\n */\nPeer.config = {\n  iceServers: [{\n    urls: ['stun:stun.l.google.com:19302', 'stun:global.stun.twilio.com:3478']\n  }],\n  sdpSemantics: 'unified-plan'\n};\nPeer.channelConfig = {};\nmodule.exports = Peer;","map":{"version":3,"names":["debug","require","getBrowserRTC","randombytes","stream","queueMicrotask","errCode","Buffer","MAX_BUFFERED_AMOUNT","ICECOMPLETE_TIMEOUT","CHANNEL_CLOSING_TIMEOUT","filterTrickle","sdp","replace","warn","message","console","Peer","Duplex","constructor","opts","Object","assign","allowHalfOpen","_id","toString","slice","_debug","channelName","initiator","channelConfig","channelNegotiated","negotiated","config","offerOptions","answerOptions","sdpTransform","streams","trickle","undefined","allowHalfTrickle","iceCompleteTimeout","destroyed","destroying","_connected","remoteAddress","remoteFamily","remotePort","localAddress","localFamily","localPort","_wrtc","wrtc","window","Error","_pcReady","_channelReady","_iceComplete","_iceCompleteTimer","_channel","_pendingCandidates","_isNegotiating","_firstNegotiation","_batchedNegotiation","_queuedNegotiation","_sendersAwaitingStable","_senderMap","Map","_closingInterval","_remoteTracks","_remoteStreams","_chunk","_cb","_interval","_pc","RTCPeerConnection","err","destroy","_isReactNativeWebrtc","_peerConnectionId","oniceconnectionstatechange","_onIceStateChange","onicegatheringstatechange","onconnectionstatechange","_onConnectionStateChange","onsignalingstatechange","_onSignalingStateChange","onicecandidate","event","_onIceCandidate","_setupData","channel","createDataChannel","ondatachannel","forEach","addStream","ontrack","_onTrack","_needsNegotiation","_onFinishBound","_onFinish","once","bufferSize","bufferedAmount","connected","readyState","address","port","family","signal","data","JSON","parse","renegotiate","transceiverRequest","addTransceiver","kind","init","candidate","remoteDescription","type","_addIceCandidate","push","setRemoteDescription","RTCSessionDescription","then","_createAnswer","catch","iceCandidateObj","RTCIceCandidate","addIceCandidate","endsWith","send","chunk","emit","getTracks","track","addTrack","submap","get","sender","set","removed","replaceTrack","oldTrack","newTrack","removeTrack","name","removeStream","negotiate","setTimeout","_createOffer","_destroy","cb","readable","writable","_readableState","ended","_writableState","finished","end","clearInterval","removeListener","close","onmessage","onopen","onclose","onerror","binaryType","bufferedAmountLowThreshold","label","_onChannelMessage","onbufferedamountlow","_onChannelBufferedAmountLow","_onChannelOpen","_onChannelClose","isClosing","setInterval","_read","_write","encoding","destroySoon","_startIceCompleteTimeout","createOffer","offer","sendOffer","localDescription","onSuccess","onError","setLocalDescription","_requestMissingTransceivers","getTransceivers","transceiver","mid","requested","createAnswer","answer","sendAnswer","connectionState","iceConnectionState","iceGatheringState","_maybeReady","getStats","flattenValues","report","prototype","call","values","value","length","res","reports","result","names","stat","id","timestamp","_connecting","findCandidatePair","items","remoteCandidates","localCandidates","candidatePairs","foundSelectedCandidatePair","item","setSelectedCandidatePair","selectedCandidatePair","local","localCandidateId","ip","Number","ipAddress","portNumber","googLocalAddress","split","includes","remote","remoteCandidateId","googRemoteAddress","selectedCandidatePairId","googActiveConnection","selected","keys","_onInterval","unref","signalingState","sdpMLineIndex","sdpMid","ArrayBuffer","from","eventStream","some","remoteStream","args","arguments","apply","WEBRTC_SUPPORT","iceServers","urls","sdpSemantics","module","exports"],"sources":["C:/Users/cubes/Desktop/Programming/MERN/VideoChatTut/VideoChatTut-master/frontend/node_modules/simple-peer/index.js"],"sourcesContent":["/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst debug = require('debug')('simple-peer')\nconst getBrowserRTC = require('get-browser-rtc')\nconst randombytes = require('randombytes')\nconst stream = require('readable-stream')\nconst queueMicrotask = require('queue-microtask') // TODO: remove when Node 10 is not supported\nconst errCode = require('err-code')\nconst { Buffer } = require('buffer')\n\nconst MAX_BUFFERED_AMOUNT = 64 * 1024\nconst ICECOMPLETE_TIMEOUT = 5 * 1000\nconst CHANNEL_CLOSING_TIMEOUT = 5 * 1000\n\n// HACK: Filter trickle lines when trickle is disabled #354\nfunction filterTrickle (sdp) {\n  return sdp.replace(/a=ice-options:trickle\\s\\n/g, '')\n}\n\nfunction warn (message) {\n  console.warn(message)\n}\n\n/**\n * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.\n * Duplex stream.\n * @param {Object} opts\n */\nclass Peer extends stream.Duplex {\n  constructor (opts) {\n    opts = Object.assign({\n      allowHalfOpen: false\n    }, opts)\n\n    super(opts)\n\n    this._id = randombytes(4).toString('hex').slice(0, 7)\n    this._debug('new peer %o', opts)\n\n    this.channelName = opts.initiator\n      ? opts.channelName || randombytes(20).toString('hex')\n      : null\n\n    this.initiator = opts.initiator || false\n    this.channelConfig = opts.channelConfig || Peer.channelConfig\n    this.channelNegotiated = this.channelConfig.negotiated\n    this.config = Object.assign({}, Peer.config, opts.config)\n    this.offerOptions = opts.offerOptions || {}\n    this.answerOptions = opts.answerOptions || {}\n    this.sdpTransform = opts.sdpTransform || (sdp => sdp)\n    this.streams = opts.streams || (opts.stream ? [opts.stream] : []) // support old \"stream\" option\n    this.trickle = opts.trickle !== undefined ? opts.trickle : true\n    this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false\n    this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT\n\n    this.destroyed = false\n    this.destroying = false\n    this._connected = false\n\n    this.remoteAddress = undefined\n    this.remoteFamily = undefined\n    this.remotePort = undefined\n    this.localAddress = undefined\n    this.localFamily = undefined\n    this.localPort = undefined\n\n    this._wrtc = (opts.wrtc && typeof opts.wrtc === 'object')\n      ? opts.wrtc\n      : getBrowserRTC()\n\n    if (!this._wrtc) {\n      if (typeof window === 'undefined') {\n        throw errCode(new Error('No WebRTC support: Specify `opts.wrtc` option in this environment'), 'ERR_WEBRTC_SUPPORT')\n      } else {\n        throw errCode(new Error('No WebRTC support: Not a supported browser'), 'ERR_WEBRTC_SUPPORT')\n      }\n    }\n\n    this._pcReady = false\n    this._channelReady = false\n    this._iceComplete = false // ice candidate trickle done (got null candidate)\n    this._iceCompleteTimer = null // send an offer/answer anyway after some timeout\n    this._channel = null\n    this._pendingCandidates = []\n\n    this._isNegotiating = false // is this peer waiting for negotiation to complete?\n    this._firstNegotiation = true\n    this._batchedNegotiation = false // batch synchronous negotiations\n    this._queuedNegotiation = false // is there a queued negotiation request?\n    this._sendersAwaitingStable = []\n    this._senderMap = new Map()\n    this._closingInterval = null\n\n    this._remoteTracks = []\n    this._remoteStreams = []\n\n    this._chunk = null\n    this._cb = null\n    this._interval = null\n\n    try {\n      this._pc = new (this._wrtc.RTCPeerConnection)(this.config)\n    } catch (err) {\n      queueMicrotask(() => this.destroy(errCode(err, 'ERR_PC_CONSTRUCTOR')))\n      return\n    }\n\n    // We prefer feature detection whenever possible, but sometimes that's not\n    // possible for certain implementations.\n    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === 'number'\n\n    this._pc.oniceconnectionstatechange = () => {\n      this._onIceStateChange()\n    }\n    this._pc.onicegatheringstatechange = () => {\n      this._onIceStateChange()\n    }\n    this._pc.onconnectionstatechange = () => {\n      this._onConnectionStateChange()\n    }\n    this._pc.onsignalingstatechange = () => {\n      this._onSignalingStateChange()\n    }\n    this._pc.onicecandidate = event => {\n      this._onIceCandidate(event)\n    }\n\n    // Other spec events, unused by this implementation:\n    // - onconnectionstatechange\n    // - onicecandidateerror\n    // - onfingerprintfailure\n    // - onnegotiationneeded\n\n    if (this.initiator || this.channelNegotiated) {\n      this._setupData({\n        channel: this._pc.createDataChannel(this.channelName, this.channelConfig)\n      })\n    } else {\n      this._pc.ondatachannel = event => {\n        this._setupData(event)\n      }\n    }\n\n    if (this.streams) {\n      this.streams.forEach(stream => {\n        this.addStream(stream)\n      })\n    }\n    this._pc.ontrack = event => {\n      this._onTrack(event)\n    }\n\n    this._debug('initial negotiation')\n    this._needsNegotiation()\n\n    this._onFinishBound = () => {\n      this._onFinish()\n    }\n    this.once('finish', this._onFinishBound)\n  }\n\n  get bufferSize () {\n    return (this._channel && this._channel.bufferedAmount) || 0\n  }\n\n  // HACK: it's possible channel.readyState is \"closing\" before peer.destroy() fires\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n  get connected () {\n    return (this._connected && this._channel.readyState === 'open')\n  }\n\n  address () {\n    return { port: this.localPort, family: this.localFamily, address: this.localAddress }\n  }\n\n  signal (data) {\n    if (this.destroyed) throw errCode(new Error('cannot signal after peer is destroyed'), 'ERR_SIGNALING')\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data)\n      } catch (err) {\n        data = {}\n      }\n    }\n    this._debug('signal()')\n\n    if (data.renegotiate && this.initiator) {\n      this._debug('got request to renegotiate')\n      this._needsNegotiation()\n    }\n    if (data.transceiverRequest && this.initiator) {\n      this._debug('got request for transceiver')\n      this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init)\n    }\n    if (data.candidate) {\n      if (this._pc.remoteDescription && this._pc.remoteDescription.type) {\n        this._addIceCandidate(data.candidate)\n      } else {\n        this._pendingCandidates.push(data.candidate)\n      }\n    }\n    if (data.sdp) {\n      this._pc.setRemoteDescription(new (this._wrtc.RTCSessionDescription)(data))\n        .then(() => {\n          if (this.destroyed) return\n\n          this._pendingCandidates.forEach(candidate => {\n            this._addIceCandidate(candidate)\n          })\n          this._pendingCandidates = []\n\n          if (this._pc.remoteDescription.type === 'offer') this._createAnswer()\n        })\n        .catch(err => {\n          this.destroy(errCode(err, 'ERR_SET_REMOTE_DESCRIPTION'))\n        })\n    }\n    if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {\n      this.destroy(errCode(new Error('signal() called with invalid signal data'), 'ERR_SIGNALING'))\n    }\n  }\n\n  _addIceCandidate (candidate) {\n    const iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate)\n    this._pc.addIceCandidate(iceCandidateObj)\n      .catch(err => {\n        if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) {\n          warn('Ignoring unsupported ICE candidate.')\n        } else {\n          this.destroy(errCode(err, 'ERR_ADD_ICE_CANDIDATE'))\n        }\n      })\n  }\n\n  /**\n   * Send text/binary data to the remote peer.\n   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk\n   */\n  send (chunk) {\n    this._channel.send(chunk)\n  }\n\n  /**\n   * Add a Transceiver to the connection.\n   * @param {String} kind\n   * @param {Object} init\n   */\n  addTransceiver (kind, init) {\n    this._debug('addTransceiver()')\n\n    if (this.initiator) {\n      try {\n        this._pc.addTransceiver(kind, init)\n        this._needsNegotiation()\n      } catch (err) {\n        this.destroy(errCode(err, 'ERR_ADD_TRANSCEIVER'))\n      }\n    } else {\n      this.emit('signal', { // request initiator to renegotiate\n        type: 'transceiverRequest',\n        transceiverRequest: { kind, init }\n      })\n    }\n  }\n\n  /**\n   * Add a MediaStream to the connection.\n   * @param {MediaStream} stream\n   */\n  addStream (stream) {\n    this._debug('addStream()')\n\n    stream.getTracks().forEach(track => {\n      this.addTrack(track, stream)\n    })\n  }\n\n  /**\n   * Add a MediaStreamTrack to the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n  addTrack (track, stream) {\n    this._debug('addTrack()')\n\n    const submap = this._senderMap.get(track) || new Map() // nested Maps map [track, stream] to sender\n    let sender = submap.get(stream)\n    if (!sender) {\n      sender = this._pc.addTrack(track, stream)\n      submap.set(stream, sender)\n      this._senderMap.set(track, submap)\n      this._needsNegotiation()\n    } else if (sender.removed) {\n      throw errCode(new Error('Track has been removed. You should enable/disable tracks that you want to re-add.'), 'ERR_SENDER_REMOVED')\n    } else {\n      throw errCode(new Error('Track has already been added to that stream.'), 'ERR_SENDER_ALREADY_ADDED')\n    }\n  }\n\n  /**\n   * Replace a MediaStreamTrack by another in the connection.\n   * @param {MediaStreamTrack} oldTrack\n   * @param {MediaStreamTrack} newTrack\n   * @param {MediaStream} stream\n   */\n  replaceTrack (oldTrack, newTrack, stream) {\n    this._debug('replaceTrack()')\n\n    const submap = this._senderMap.get(oldTrack)\n    const sender = submap ? submap.get(stream) : null\n    if (!sender) {\n      throw errCode(new Error('Cannot replace track that was never added.'), 'ERR_TRACK_NOT_ADDED')\n    }\n    if (newTrack) this._senderMap.set(newTrack, submap)\n\n    if (sender.replaceTrack != null) {\n      sender.replaceTrack(newTrack)\n    } else {\n      this.destroy(errCode(new Error('replaceTrack is not supported in this browser'), 'ERR_UNSUPPORTED_REPLACETRACK'))\n    }\n  }\n\n  /**\n   * Remove a MediaStreamTrack from the connection.\n   * @param {MediaStreamTrack} track\n   * @param {MediaStream} stream\n   */\n  removeTrack (track, stream) {\n    this._debug('removeSender()')\n\n    const submap = this._senderMap.get(track)\n    const sender = submap ? submap.get(stream) : null\n    if (!sender) {\n      throw errCode(new Error('Cannot remove track that was never added.'), 'ERR_TRACK_NOT_ADDED')\n    }\n    try {\n      sender.removed = true\n      this._pc.removeTrack(sender)\n    } catch (err) {\n      if (err.name === 'NS_ERROR_UNEXPECTED') {\n        this._sendersAwaitingStable.push(sender) // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874\n      } else {\n        this.destroy(errCode(err, 'ERR_REMOVE_TRACK'))\n      }\n    }\n    this._needsNegotiation()\n  }\n\n  /**\n   * Remove a MediaStream from the connection.\n   * @param {MediaStream} stream\n   */\n  removeStream (stream) {\n    this._debug('removeSenders()')\n\n    stream.getTracks().forEach(track => {\n      this.removeTrack(track, stream)\n    })\n  }\n\n  _needsNegotiation () {\n    this._debug('_needsNegotiation')\n    if (this._batchedNegotiation) return // batch synchronous renegotiations\n    this._batchedNegotiation = true\n    queueMicrotask(() => {\n      this._batchedNegotiation = false\n      if (this.initiator || !this._firstNegotiation) {\n        this._debug('starting batched negotiation')\n        this.negotiate()\n      } else {\n        this._debug('non-initiator initial negotiation request discarded')\n      }\n      this._firstNegotiation = false\n    })\n  }\n\n  negotiate () {\n    if (this.initiator) {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true\n        this._debug('already negotiating, queueing')\n      } else {\n        this._debug('start negotiation')\n        setTimeout(() => { // HACK: Chrome crashes if we immediately call createOffer\n          this._createOffer()\n        }, 0)\n      }\n    } else {\n      if (this._isNegotiating) {\n        this._queuedNegotiation = true\n        this._debug('already negotiating, queueing')\n      } else {\n        this._debug('requesting negotiation from initiator')\n        this.emit('signal', { // request initiator to renegotiate\n          type: 'renegotiate',\n          renegotiate: true\n        })\n      }\n    }\n    this._isNegotiating = true\n  }\n\n  // TODO: Delete this method once readable-stream is updated to contain a default\n  // implementation of destroy() that automatically calls _destroy()\n  // See: https://github.com/nodejs/readable-stream/issues/283\n  destroy (err) {\n    this._destroy(err, () => {})\n  }\n\n  _destroy (err, cb) {\n    if (this.destroyed || this.destroying) return\n    this.destroying = true\n\n    this._debug('destroying (error: %s)', err && (err.message || err))\n\n    queueMicrotask(() => { // allow events concurrent with the call to _destroy() to fire (see #692)\n      this.destroyed = true\n      this.destroying = false\n\n      this._debug('destroy (error: %s)', err && (err.message || err))\n\n      this.readable = this.writable = false\n\n      if (!this._readableState.ended) this.push(null)\n      if (!this._writableState.finished) this.end()\n\n      this._connected = false\n      this._pcReady = false\n      this._channelReady = false\n      this._remoteTracks = null\n      this._remoteStreams = null\n      this._senderMap = null\n\n      clearInterval(this._closingInterval)\n      this._closingInterval = null\n\n      clearInterval(this._interval)\n      this._interval = null\n      this._chunk = null\n      this._cb = null\n\n      if (this._onFinishBound) this.removeListener('finish', this._onFinishBound)\n      this._onFinishBound = null\n\n      if (this._channel) {\n        try {\n          this._channel.close()\n        } catch (err) {}\n\n        // allow events concurrent with destruction to be handled\n        this._channel.onmessage = null\n        this._channel.onopen = null\n        this._channel.onclose = null\n        this._channel.onerror = null\n      }\n      if (this._pc) {\n        try {\n          this._pc.close()\n        } catch (err) {}\n\n        // allow events concurrent with destruction to be handled\n        this._pc.oniceconnectionstatechange = null\n        this._pc.onicegatheringstatechange = null\n        this._pc.onsignalingstatechange = null\n        this._pc.onicecandidate = null\n        this._pc.ontrack = null\n        this._pc.ondatachannel = null\n      }\n      this._pc = null\n      this._channel = null\n\n      if (err) this.emit('error', err)\n      this.emit('close')\n      cb()\n    })\n  }\n\n  _setupData (event) {\n    if (!event.channel) {\n      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),\n      // which is invalid behavior. Handle it gracefully.\n      // See: https://github.com/feross/simple-peer/issues/163\n      return this.destroy(errCode(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'))\n    }\n\n    this._channel = event.channel\n    this._channel.binaryType = 'arraybuffer'\n\n    if (typeof this._channel.bufferedAmountLowThreshold === 'number') {\n      this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT\n    }\n\n    this.channelName = this._channel.label\n\n    this._channel.onmessage = event => {\n      this._onChannelMessage(event)\n    }\n    this._channel.onbufferedamountlow = () => {\n      this._onChannelBufferedAmountLow()\n    }\n    this._channel.onopen = () => {\n      this._onChannelOpen()\n    }\n    this._channel.onclose = () => {\n      this._onChannelClose()\n    }\n    this._channel.onerror = err => {\n      this.destroy(errCode(err, 'ERR_DATA_CHANNEL'))\n    }\n\n    // HACK: Chrome will sometimes get stuck in readyState \"closing\", let's check for this condition\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743\n    let isClosing = false\n    this._closingInterval = setInterval(() => { // No \"onclosing\" event\n      if (this._channel && this._channel.readyState === 'closing') {\n        if (isClosing) this._onChannelClose() // closing timed out: equivalent to onclose firing\n        isClosing = true\n      } else {\n        isClosing = false\n      }\n    }, CHANNEL_CLOSING_TIMEOUT)\n  }\n\n  _read () {}\n\n  _write (chunk, encoding, cb) {\n    if (this.destroyed) return cb(errCode(new Error('cannot write after peer is destroyed'), 'ERR_DATA_CHANNEL'))\n\n    if (this._connected) {\n      try {\n        this.send(chunk)\n      } catch (err) {\n        return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'))\n      }\n      if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n        this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount)\n        this._cb = cb\n      } else {\n        cb(null)\n      }\n    } else {\n      this._debug('write before connect')\n      this._chunk = chunk\n      this._cb = cb\n    }\n  }\n\n  // When stream finishes writing, close socket. Half open connections are not\n  // supported.\n  _onFinish () {\n    if (this.destroyed) return\n\n    // Wait a bit before destroying so the socket flushes.\n    // TODO: is there a more reliable way to accomplish this?\n    const destroySoon = () => {\n      setTimeout(() => this.destroy(), 1000)\n    }\n\n    if (this._connected) {\n      destroySoon()\n    } else {\n      this.once('connect', destroySoon)\n    }\n  }\n\n  _startIceCompleteTimeout () {\n    if (this.destroyed) return\n    if (this._iceCompleteTimer) return\n    this._debug('started iceComplete timeout')\n    this._iceCompleteTimer = setTimeout(() => {\n      if (!this._iceComplete) {\n        this._iceComplete = true\n        this._debug('iceComplete timeout completed')\n        this.emit('iceTimeout')\n        this.emit('_iceComplete')\n      }\n    }, this.iceCompleteTimeout)\n  }\n\n  _createOffer () {\n    if (this.destroyed) return\n\n    this._pc.createOffer(this.offerOptions)\n      .then(offer => {\n        if (this.destroyed) return\n        if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp)\n        offer.sdp = this.sdpTransform(offer.sdp)\n\n        const sendOffer = () => {\n          if (this.destroyed) return\n          const signal = this._pc.localDescription || offer\n          this._debug('signal')\n          this.emit('signal', {\n            type: signal.type,\n            sdp: signal.sdp\n          })\n        }\n\n        const onSuccess = () => {\n          this._debug('createOffer success')\n          if (this.destroyed) return\n          if (this.trickle || this._iceComplete) sendOffer()\n          else this.once('_iceComplete', sendOffer) // wait for candidates\n        }\n\n        const onError = err => {\n          this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'))\n        }\n\n        this._pc.setLocalDescription(offer)\n          .then(onSuccess)\n          .catch(onError)\n      })\n      .catch(err => {\n        this.destroy(errCode(err, 'ERR_CREATE_OFFER'))\n      })\n  }\n\n  _requestMissingTransceivers () {\n    if (this._pc.getTransceivers) {\n      this._pc.getTransceivers().forEach(transceiver => {\n        if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {\n          transceiver.requested = true // HACK: Safari returns negotiated transceivers with a null mid\n          this.addTransceiver(transceiver.sender.track.kind)\n        }\n      })\n    }\n  }\n\n  _createAnswer () {\n    if (this.destroyed) return\n\n    this._pc.createAnswer(this.answerOptions)\n      .then(answer => {\n        if (this.destroyed) return\n        if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp)\n        answer.sdp = this.sdpTransform(answer.sdp)\n\n        const sendAnswer = () => {\n          if (this.destroyed) return\n          const signal = this._pc.localDescription || answer\n          this._debug('signal')\n          this.emit('signal', {\n            type: signal.type,\n            sdp: signal.sdp\n          })\n          if (!this.initiator) this._requestMissingTransceivers()\n        }\n\n        const onSuccess = () => {\n          if (this.destroyed) return\n          if (this.trickle || this._iceComplete) sendAnswer()\n          else this.once('_iceComplete', sendAnswer)\n        }\n\n        const onError = err => {\n          this.destroy(errCode(err, 'ERR_SET_LOCAL_DESCRIPTION'))\n        }\n\n        this._pc.setLocalDescription(answer)\n          .then(onSuccess)\n          .catch(onError)\n      })\n      .catch(err => {\n        this.destroy(errCode(err, 'ERR_CREATE_ANSWER'))\n      })\n  }\n\n  _onConnectionStateChange () {\n    if (this.destroyed) return\n    if (this._pc.connectionState === 'failed') {\n      this.destroy(errCode(new Error('Connection failed.'), 'ERR_CONNECTION_FAILURE'))\n    }\n  }\n\n  _onIceStateChange () {\n    if (this.destroyed) return\n    const iceConnectionState = this._pc.iceConnectionState\n    const iceGatheringState = this._pc.iceGatheringState\n\n    this._debug(\n      'iceStateChange (connection: %s) (gathering: %s)',\n      iceConnectionState,\n      iceGatheringState\n    )\n    this.emit('iceStateChange', iceConnectionState, iceGatheringState)\n\n    if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {\n      this._pcReady = true\n      this._maybeReady()\n    }\n    if (iceConnectionState === 'failed') {\n      this.destroy(errCode(new Error('Ice connection failed.'), 'ERR_ICE_CONNECTION_FAILURE'))\n    }\n    if (iceConnectionState === 'closed') {\n      this.destroy(errCode(new Error('Ice connection closed.'), 'ERR_ICE_CONNECTION_CLOSED'))\n    }\n  }\n\n  getStats (cb) {\n    // statreports can come with a value array instead of properties\n    const flattenValues = report => {\n      if (Object.prototype.toString.call(report.values) === '[object Array]') {\n        report.values.forEach(value => {\n          Object.assign(report, value)\n        })\n      }\n      return report\n    }\n\n    // Promise-based getStats() (standard)\n    if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {\n      this._pc.getStats()\n        .then(res => {\n          const reports = []\n          res.forEach(report => {\n            reports.push(flattenValues(report))\n          })\n          cb(null, reports)\n        }, err => cb(err))\n\n    // Single-parameter callback-based getStats() (non-standard)\n    } else if (this._pc.getStats.length > 0) {\n      this._pc.getStats(res => {\n        // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed\n        if (this.destroyed) return\n\n        const reports = []\n        res.result().forEach(result => {\n          const report = {}\n          result.names().forEach(name => {\n            report[name] = result.stat(name)\n          })\n          report.id = result.id\n          report.type = result.type\n          report.timestamp = result.timestamp\n          reports.push(flattenValues(report))\n        })\n        cb(null, reports)\n      }, err => cb(err))\n\n    // Unknown browser, skip getStats() since it's anyone's guess which style of\n    // getStats() they implement.\n    } else {\n      cb(null, [])\n    }\n  }\n\n  _maybeReady () {\n    this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady)\n    if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return\n\n    this._connecting = true\n\n    // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339\n    const findCandidatePair = () => {\n      if (this.destroyed) return\n\n      this.getStats((err, items) => {\n        if (this.destroyed) return\n\n        // Treat getStats error as non-fatal. It's not essential.\n        if (err) items = []\n\n        const remoteCandidates = {}\n        const localCandidates = {}\n        const candidatePairs = {}\n        let foundSelectedCandidatePair = false\n\n        items.forEach(item => {\n          // TODO: Once all browsers support the hyphenated stats report types, remove\n          // the non-hypenated ones\n          if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {\n            remoteCandidates[item.id] = item\n          }\n          if (item.type === 'localcandidate' || item.type === 'local-candidate') {\n            localCandidates[item.id] = item\n          }\n          if (item.type === 'candidatepair' || item.type === 'candidate-pair') {\n            candidatePairs[item.id] = item\n          }\n        })\n\n        const setSelectedCandidatePair = selectedCandidatePair => {\n          foundSelectedCandidatePair = true\n\n          let local = localCandidates[selectedCandidatePair.localCandidateId]\n\n          if (local && (local.ip || local.address)) {\n            // Spec\n            this.localAddress = local.ip || local.address\n            this.localPort = Number(local.port)\n          } else if (local && local.ipAddress) {\n            // Firefox\n            this.localAddress = local.ipAddress\n            this.localPort = Number(local.portNumber)\n          } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            local = selectedCandidatePair.googLocalAddress.split(':')\n            this.localAddress = local[0]\n            this.localPort = Number(local[1])\n          }\n          if (this.localAddress) {\n            this.localFamily = this.localAddress.includes(':') ? 'IPv6' : 'IPv4'\n          }\n\n          let remote = remoteCandidates[selectedCandidatePair.remoteCandidateId]\n\n          if (remote && (remote.ip || remote.address)) {\n            // Spec\n            this.remoteAddress = remote.ip || remote.address\n            this.remotePort = Number(remote.port)\n          } else if (remote && remote.ipAddress) {\n            // Firefox\n            this.remoteAddress = remote.ipAddress\n            this.remotePort = Number(remote.portNumber)\n          } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {\n            // TODO: remove this once Chrome 58 is released\n            remote = selectedCandidatePair.googRemoteAddress.split(':')\n            this.remoteAddress = remote[0]\n            this.remotePort = Number(remote[1])\n          }\n          if (this.remoteAddress) {\n            this.remoteFamily = this.remoteAddress.includes(':') ? 'IPv6' : 'IPv4'\n          }\n\n          this._debug(\n            'connect local: %s:%s remote: %s:%s',\n            this.localAddress,\n            this.localPort,\n            this.remoteAddress,\n            this.remotePort\n          )\n        }\n\n        items.forEach(item => {\n          // Spec-compliant\n          if (item.type === 'transport' && item.selectedCandidatePairId) {\n            setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId])\n          }\n\n          // Old implementations\n          if (\n            (item.type === 'googCandidatePair' && item.googActiveConnection === 'true') ||\n            ((item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected)\n          ) {\n            setSelectedCandidatePair(item)\n          }\n        })\n\n        // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates\n        // But wait until at least 1 candidate pair is available\n        if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {\n          setTimeout(findCandidatePair, 100)\n          return\n        } else {\n          this._connecting = false\n          this._connected = true\n        }\n\n        if (this._chunk) {\n          try {\n            this.send(this._chunk)\n          } catch (err) {\n            return this.destroy(errCode(err, 'ERR_DATA_CHANNEL'))\n          }\n          this._chunk = null\n          this._debug('sent chunk from \"write before connect\"')\n\n          const cb = this._cb\n          this._cb = null\n          cb(null)\n        }\n\n        // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,\n        // fallback to using setInterval to implement backpressure.\n        if (typeof this._channel.bufferedAmountLowThreshold !== 'number') {\n          this._interval = setInterval(() => this._onInterval(), 150)\n          if (this._interval.unref) this._interval.unref()\n        }\n\n        this._debug('connect')\n        this.emit('connect')\n      })\n    }\n    findCandidatePair()\n  }\n\n  _onInterval () {\n    if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {\n      return\n    }\n    this._onChannelBufferedAmountLow()\n  }\n\n  _onSignalingStateChange () {\n    if (this.destroyed) return\n\n    if (this._pc.signalingState === 'stable') {\n      this._isNegotiating = false\n\n      // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'\n      this._debug('flushing sender queue', this._sendersAwaitingStable)\n      this._sendersAwaitingStable.forEach(sender => {\n        this._pc.removeTrack(sender)\n        this._queuedNegotiation = true\n      })\n      this._sendersAwaitingStable = []\n\n      if (this._queuedNegotiation) {\n        this._debug('flushing negotiation queue')\n        this._queuedNegotiation = false\n        this._needsNegotiation() // negotiate again\n      } else {\n        this._debug('negotiated')\n        this.emit('negotiated')\n      }\n    }\n\n    this._debug('signalingStateChange %s', this._pc.signalingState)\n    this.emit('signalingStateChange', this._pc.signalingState)\n  }\n\n  _onIceCandidate (event) {\n    if (this.destroyed) return\n    if (event.candidate && this.trickle) {\n      this.emit('signal', {\n        type: 'candidate',\n        candidate: {\n          candidate: event.candidate.candidate,\n          sdpMLineIndex: event.candidate.sdpMLineIndex,\n          sdpMid: event.candidate.sdpMid\n        }\n      })\n    } else if (!event.candidate && !this._iceComplete) {\n      this._iceComplete = true\n      this.emit('_iceComplete')\n    }\n    // as soon as we've received one valid candidate start timeout\n    if (event.candidate) {\n      this._startIceCompleteTimeout()\n    }\n  }\n\n  _onChannelMessage (event) {\n    if (this.destroyed) return\n    let data = event.data\n    if (data instanceof ArrayBuffer) data = Buffer.from(data)\n    this.push(data)\n  }\n\n  _onChannelBufferedAmountLow () {\n    if (this.destroyed || !this._cb) return\n    this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount)\n    const cb = this._cb\n    this._cb = null\n    cb(null)\n  }\n\n  _onChannelOpen () {\n    if (this._connected || this.destroyed) return\n    this._debug('on channel open')\n    this._channelReady = true\n    this._maybeReady()\n  }\n\n  _onChannelClose () {\n    if (this.destroyed) return\n    this._debug('on channel close')\n    this.destroy()\n  }\n\n  _onTrack (event) {\n    if (this.destroyed) return\n\n    event.streams.forEach(eventStream => {\n      this._debug('on track')\n      this.emit('track', event.track, eventStream)\n\n      this._remoteTracks.push({\n        track: event.track,\n        stream: eventStream\n      })\n\n      if (this._remoteStreams.some(remoteStream => {\n        return remoteStream.id === eventStream.id\n      })) return // Only fire one 'stream' event, even though there may be multiple tracks per stream\n\n      this._remoteStreams.push(eventStream)\n      queueMicrotask(() => {\n        this._debug('on stream')\n        this.emit('stream', eventStream) // ensure all tracks have been added\n      })\n    })\n  }\n\n  _debug () {\n    const args = [].slice.call(arguments)\n    args[0] = '[' + this._id + '] ' + args[0]\n    debug.apply(null, args)\n  }\n}\n\nPeer.WEBRTC_SUPPORT = !!getBrowserRTC()\n\n/**\n * Expose peer and data channel config for overriding all Peer\n * instances. Otherwise, just set opts.config or opts.channelConfig\n * when constructing a Peer.\n */\nPeer.config = {\n  iceServers: [\n    {\n      urls: [\n        'stun:stun.l.google.com:19302',\n        'stun:global.stun.twilio.com:3478'\n      ]\n    }\n  ],\n  sdpSemantics: 'unified-plan'\n}\n\nPeer.channelConfig = {}\n\nmodule.exports = Peer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}